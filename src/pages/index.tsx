import { PLATFORM, VIBE } from "@prisma/client";
import Head from "next/head";
import { useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { api } from "../utils/api";
import type { NextPageWithLayout } from "./_app";

// external imports
import SelectBox from "@/components/SelectBox";
import Layout from "@/layouts/Layout";
import { FaGithub } from "react-icons/fa";

type Inputs = {
  bio: string;
  vibe: VIBE;
  platform: PLATFORM;
};

const Home: NextPageWithLayout = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const vibes = typeof VIBE === "object" ? Object.values(VIBE) : [];
  const [vibe, setVibe] = useState<VIBE>("PROFESSIONAL");
  const platforms = typeof PLATFORM === "object" ? Object.values(PLATFORM) : [];
  const [platform, setPlatform] = useState<PLATFORM>("FACEBOOK");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isDone, setIsDone] = useState<boolean>(false);
  const [generatedBios, setGeneratedBios] = useState<string>("");

  console.log("Streamed response: ", generatedBios);

  // react-hook-form
  const { register, handleSubmit, control } = useForm<Inputs>();
  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    const prompt =
      data.vibe === VIBE.FUNNY
        ? `Generate 2 funny ${
            data.platform
          } bios with no hashtags and clearly labeled "1." and "2.". Make sure there is a joke in there and it's a little ridiculous. Make sure each generated bio is at max 20 words and base it on this context: ${
            data.bio
          }${data.bio.slice(-1) === "." ? "" : "."}`
        : `Generate 2 ${vibe} ${
            data.platform
          } bios with no hashtags and clearly labeled "1." and "2.". Make sure each generated bio is at least 14 words and at max 20 words and base them on this context: ${
            data.bio
          }${data.bio.slice(-1) === "." ? "" : "."}`;

    setGeneratedBios("");
    setIsLoading(true);
    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt,
      }),
    });
    console.log("Edge function returned.");

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    // This data is a ReadableStream
    const responseData = response.body;
    if (!responseData) return;

    const reader = responseData.getReader();
    const decoder = new TextDecoder();

    while (!isDone) {
      const { done, value } = await reader.read();
      if (done) {
        setIsDone(true);
        break;
      }
      const decodedValue = decoder.decode(value);
      setGeneratedBios((prev) => prev + decodedValue);
    }

    setIsDone(false);
    setIsLoading(false);
  };

  return (
    <>
      <Head>
        <title>Bio Generator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-32 flex min-h-screen max-w-2xl flex-col gap-5">
        <a
          aria-label="navigate to github repository"
          href="https://github.com/sadmann7/biogen"
          target="_blank"
          rel="noreferrer"
          className="mx-auto flex w-fit items-center gap-1 rounded-full bg-gray-100 px-3 py-1.5 text-sm font-medium text-gray-700 shadow-md transition-colors hover:bg-gray-300 active:bg-gray-100"
        >
          <FaGithub className="mr-1 inline-block" size={18} />
          <span className="">Star on GitHub</span>
        </a>
        <div className="grid gap-5">
          <h1 className="text-center text-3xl font-bold tracking-wide text-white sm:text-5xl">
            Generate your social media bios with AI
          </h1>
          <span className="text-center text-base text-gray-300 sm:text-lg">
            69 Bios generated so far
          </span>
        </div>
        <form
          aria-label="generate bio from"
          className="grid gap-6 whitespace-nowrap"
          onSubmit={(...args) => void handleSubmit(onSubmit)(...args)}
        >
          <fieldset className="grid gap-3">
            <label
              htmlFor="bio"
              className="text-sm font-medium text-white sm:text-base"
            >
              Copy your current bio (or write a few sentences about yourself)
            </label>
            <textarea
              id="bio"
              className="w-full rounded-md border-gray-400 bg-transparent px-4 pt-2.5 pb-10 text-sm text-white transition-colors placeholder:text-gray-400 sm:text-base"
              placeholder="e.g. Junor web developer, posting about web development, tech, and more."
              {...register("bio")}
            />
          </fieldset>
          <fieldset className="grid gap-3">
            <label
              htmlFor="vibe"
              className="text-sm font-medium text-white sm:text-base"
            >
              Select your vibe
            </label>
            <SelectBox
              id="vibe"
              control={control}
              name="vibe"
              options={vibes}
              selected={vibe}
              setSelected={setVibe}
            />
          </fieldset>
          <fieldset className="grid gap-3">
            <label
              htmlFor="platform"
              className="text-sm font-medium text-white sm:text-base"
            >
              Select your social media platform
            </label>
            <SelectBox
              id="platform"
              control={control}
              name="platform"
              options={platforms}
              selected={platform}
              setSelected={setPlatform}
            />
          </fieldset>
          <button
            className="w-full rounded-md bg-gray-400 px-4 py-2 font-medium transition-colors enabled:hover:bg-gray-500 enabled:active:bg-gray-400"
            disabled={isLoading}
          >
            {isLoading ? "Generating..." : "Generate"}
          </button>
        </form>
        <div className="text-white">{generatedBios}</div>
      </main>
    </>
  );
};

export default Home;

Home.getLayout = (page) => <Layout>{page}</Layout>;
